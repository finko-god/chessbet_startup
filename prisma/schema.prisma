// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String?
  chessCoin       Int       @default(0)
  stripeConnectId String?   @unique // Stripe Connect account ID
  ableForPayouts  Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  gamesCreated    Game[]    @relation("GameCreator")
  gamesJoined     Game[]    @relation("GamePlayer")
  transfers       Transfer[]
  payouts         Payout[]
}

model Payout {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  amount         Int      // In cents (e.g., 1000 = â‚¬10.00)
  currency       String   @default("eur")
  status         String   // created, paid, failed, canceled
  stripePayoutId String   // Stripe payout ID (e.g., "po_123")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Game {
  id          String   @id @default(uuid())
  player1Id   String
  player2Id   String?
  whitePlayerId String?  // ID of the player playing as white
  blackPlayerId String?  // ID of the player playing as black
  player1     User     @relation("GameCreator", fields: [player1Id], references: [id])
  player2     User?    @relation("GamePlayer", fields: [player2Id], references: [id])
  betAmount   Int      // The bet amount for the game
  status      String   // "waiting", "started", "finished"
  fen         String?  // Current board position in FEN notation
  pgn         String?  // Full game history in PGN format
  winner      String?  // ID of the winner (if game is finished)
  player1TimeLeft Int?     // Time left in milliseconds for white player (creator)
  player2TimeLeft Int?     // Time left in milliseconds for black player (joiner)
  lastMoveAt     DateTime? // Timestamp of the last move
  betProcessed Boolean  @default(false) // Track if bets have been processed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transfer {
  id              String   @id @default(cuid())
  userId          String
  amount          Int      // Amount in cents
  currency        String
  status          String   // completed, failed, pending
  stripeTransferId String  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}